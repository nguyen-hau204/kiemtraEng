const vocabulary = [
    { eng: "Who is Mr. Park meeting at the airport?", viet: "√îng Park g·∫∑p ai ·ªü s√¢n bay?" },
    { eng: "Inside the terminal", viet: "Trong khu v·ª±c nh√† ga" },
    { eng: "They called a taxi", viet: "H·ªç ƒë√£ g·ªçi m·ªôt chi·∫øc taxi" },
    { eng: "A new client", viet: "M·ªôt kh√°ch h√†ng m·ªõi" },
    { eng: "Which of these notebooks is yours?", viet: "Cu·ªën s·ªï tay n√†o trong s·ªë n√†y l√† c·ªßa b·∫°n?" },
    { eng: "At the library", viet: "·ªû th∆∞ vi·ªán" },
    { eng: "The black one‚Äôs mine", viet: "Chi·∫øc m√†u ƒëen l√† c·ªßa t√¥i" },
    { eng: "Thanks, it is", viet: "C·∫£m ∆°n, ƒë√∫ng l√† n√≥ r·ªìi" },
    { eng: "Who‚Äôs been selected to lead the design team?", viet: "Ai ƒë√£ ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ d·∫´n d·∫Øt ƒë·ªôi thi·∫øt k·∫ø?" },
    { eng: "Sign here, please", viet: "K√Ω v√†o ƒë√¢y, xin vui l√≤ng" },
    { eng: "Will he read it?", viet: "Anh ·∫•y s·∫Ω ƒë·ªçc n√≥ ch·ª©?" },
    { eng: "Ms. Lee was chosen", viet: "C√¥ Lee ƒë√£ ƒë∆∞·ª£c ch·ªçn" },
    { eng: "Who‚Äôs retiring next month?", viet: "Ai s·∫Ω ngh·ªâ h∆∞u v√†o th√°ng t·ªõi?" },
    { eng: "No, we‚Äôre not tired", viet: "Kh√¥ng, ch√∫ng t√¥i kh√¥ng m·ªát" },
    { eng: "Library Caroline is", viet: "T·ªõi ngh·ªâ! Caroline s·∫Ω ngh·ªâ h∆∞u (t·ªõi d·∫´n m√°y trong h√¨nh)" },
    { eng: "It‚Äôs due in four weeks", viet: "N√≥ s·∫Ω ƒë·∫øn trong 4 tu·∫ßn" },
    { eng: "Which paint color did you choose for the waiting room?", viet: "B·∫°n ƒë√£ ch·ªçn m√†u s∆°n n√†o cho ph√≤ng ch·ªù?" },
    { eng: "He didn‚Äôt see the memo", viet: "Anh ·∫•y kh√¥ng th·∫•y b·∫£n ghi nh·ªõ" },
    { eng: "A shade of pale green", viet: "M·ªôt s·∫Øc th√°i xanh nh·∫°t" },
    { eng: "I don‚Äôt mind waiting", viet: "T√¥i kh√¥ng phi·ªÅn ch·ªù ƒë·ª£i" },
    { eng: "What was the article about?", viet: "B√†i b√°o n√≥i v·ªÅ g√¨?" },
    { eng: "I didn‚Äôt read it", viet: "T√¥i kh√¥ng ƒë·ªçc n√≥" },
    { eng: "No, not recently", viet: "Kh√¥ng, kh√¥ng g·∫ßn ƒë√¢y" },
    { eng: "That‚Äôs about it", viet: "ƒê·∫°i kh√°i l√† v·∫≠y" },
    { eng: "Who was in your office this morning?", viet: "Ai ƒë√£ ·ªü trong vƒÉn ph√≤ng c·ªßa b·∫°n s√°ng nay?" },
    { eng: "In the other building", viet: "Trong t√≤a nh√† kh√°c" },
    { eng: "I‚Äôll meet him tomorrow", viet: "T√¥i s·∫Ω g·∫∑p anh ·∫•y v√†o ng√†y mai" },
    { eng: "My manager Mr. Lao", viet: "Qu·∫£n l√Ω c·ªßa t√¥i, √¥ng Lao" },
    { eng: "Who‚Äôs leading the orientation?", viet: "Ai ƒëang d·∫´n d·∫Øt bu·ªïi ƒë·ªãnh h∆∞·ªõng?" },
    { eng: "He read it recently", viet: "Anh ·∫•y ƒë√£ ƒë·ªçc n√≥ g·∫ßn ƒë√¢y" },
    { eng: "The human resource team", viet: "ƒê·ªôi nh√¢n s·ª±" },
    { eng: "Some training manuals", viet: "M·ªôt s·ªë t√†i li·ªáu ƒë√†o t·∫°o" },
    { eng: "What should I bring to the trade show?", viet: "T√¥i n√™n mang g√¨ ƒë·∫øn h·ªôi ch·ª£ th∆∞∆°ng m·∫°i?" },
    { eng: "Your business cards", viet: "Th·∫ª kinh doanh c·ªßa b·∫°n" },
    { eng: "At the conference center", viet: "T·∫°i trung t√¢m h·ªôi ngh·ªã" },
    { eng: "Sorry, I have it", viet: "Xin l·ªói, t√¥i c√≥ r·ªìi" },
    { eng: "What kind of company does Mr. Perez manage?", viet: "√îng Perez qu·∫£n l√Ω lo·∫°i c√¥ng ty n√†o?" },
    { eng: "For twenty years", viet: "Trong hai m∆∞∆°i nƒÉm" },
    { eng: "I can manage that", viet: "T√¥i c√≥ th·ªÉ qu·∫£n l√Ω ƒë∆∞·ª£c vi·ªác ƒë√≥" },
    { eng: "An advertising agency", viet: "M·ªôt c√¥ng ty qu·∫£ng c√°o" }
];

let currentQuestion = {};
let currentMode = '';

function startGame(mode) {
    currentMode = mode;
    document.getElementById('game-area').style.display = 'block';
    document.getElementById('fill-input').style.display = mode === 'fillBlank' ? 'block' : 'none';
    document.getElementById('options').style.display = mode === 'fillBlank' ? 'none' : 'block';
    document.getElementById('result').textContent = '';
    generateQuestion();
}

function generateQuestion() {
    const randomIndex = Math.floor(Math.random() * vocabulary.length);
    currentQuestion = vocabulary[randomIndex];

    if (currentMode === 'engToViet') {
        document.getElementById('question').textContent = currentQuestion.eng;
        generateOptions('viet');
    } else if (currentMode === 'vietToEng') {
        document.getElementById('question').textContent = currentQuestion.viet;
        generateOptions('eng');
    } else if (currentMode === 'fillBlank') {
        const sentence = currentQuestion.eng.replace(currentQuestion.eng.split(' ')[2], '____');
        document.getElementById('question').textContent = sentence;
    }
}

function generateOptions(key) {
    const optionsDiv = document.getElementById('options');
    optionsDiv.innerHTML = '';

    const correctAnswer = currentQuestion[key];
    const allAnswers = vocabulary.map(item => item[key]).filter(answer => answer !== correctAnswer);
    const shuffledAnswers = [correctAnswer];

    while (shuffledAnswers.length < 4) {
        const randomAnswer = allAnswers[Math.floor(Math.random() * allAnswers.length)];
        if (!shuffledAnswers.includes(randomAnswer)) {
            shuffledAnswers.push(randomAnswer);
        }
    }

    shuffledAnswers.sort(() => Math.random() - 0.5);

    shuffledAnswers.forEach(answer => {
        const button = document.createElement('button');
        button.textContent = answer;
        button.onclick = () => checkAnswer(answer);
        optionsDiv.appendChild(button);
    });
}

function checkAnswer(userAnswer) {
    const result = document.getElementById('result');
    let correctAnswer;

    if (currentMode === 'engToViet') {
        correctAnswer = currentQuestion.viet;
        userAnswer = userAnswer || document.getElementById('fill-input').value;
    } else if (currentMode === 'vietToEng') {
        correctAnswer = currentQuestion.eng;
        userAnswer = userAnswer || document.getElementById('fill-input').value;
    } else if (currentMode === 'fillBlank') {
        correctAnswer = currentQuestion.eng.split(' ')[2];
        userAnswer = document.getElementById('fill-input').value;
    }

    if (userAnswer === correctAnswer) {
        result.textContent = 'Ch√≠nh x√°c! üéâ';
        result.style.color = 'green';
    } else {
        result.textContent = `Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†: ${correctAnswer}`;
        result.style.color = 'red';
    }

    setTimeout(generateQuestion, 2000);
}