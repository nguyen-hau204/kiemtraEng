const vocabulary = [
    { eng: "Who is Mr. Park meeting at the airport?", viet: "√îng Park g·∫∑p ai ·ªü s√¢n bay?" },
    { eng: "Inside the terminal", viet: "Trong khu v·ª±c nh√† ga" },
    { eng: "They called a taxi", viet: "H·ªç ƒë√£ g·ªçi m·ªôt chi·∫øc taxi" },
    { eng: "A new client", viet: "M·ªôt kh√°ch h√†ng m·ªõi" },
    { eng: "Which of these notebooks is yours?", viet: "Cu·ªën s·ªï tay n√†o trong s·ªë n√†y l√† c·ªßa b·∫°n?" },
    { eng: "At the library", viet: "·ªû th∆∞ vi·ªán" },
    { eng: "The black one's mine", viet: "Chi·∫øc m√†u ƒëen l√† c·ªßa t√¥i" },
    { eng: "Thanks, it is", viet: "C·∫£m ∆°n, ƒë√∫ng l√† n√≥ r·ªìi" },
    { eng: "Who's been selected to lead the design team?", viet: "Ai ƒë√£ ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ d·∫´n d·∫Øt ƒë·ªôi thi·∫øt k·∫ø?" },
    { eng: "Sign here, please", viet: "K√Ω v√†o ƒë√¢y, xin vui l√≤ng" },
    { eng: "Will he read it?", viet: "Anh ·∫•y s·∫Ω ƒë·ªçc n√≥ ch·ª©?" },
    { eng: "Ms. Lee was chosen", viet: "C√¥ Lee ƒë√£ ƒë∆∞·ª£c ch·ªçn" },
    { eng: "Who's retiring next month?", viet: "Ai s·∫Ω ngh·ªâ h∆∞u v√†o th√°ng t·ªõi?" },
    { eng: "No, we're not tired", viet: "Kh√¥ng, ch√∫ng t√¥i kh√¥ng m·ªát" },
    { eng: "Library Caroline is", viet: "T·ªõi ngh·ªâ! Caroline s·∫Ω ngh·ªâ h∆∞u (t·ªõi d·∫´n m√°y trong h√¨nh)" },
    { eng: "It's due in four weeks", viet: "N√≥ s·∫Ω ƒë·∫øn trong 4 tu·∫ßn" },
    { eng: "Which paint color did you choose for the waiting room?", viet: "B·∫°n ƒë√£ ch·ªçn m√†u s∆°n n√†o cho ph√≤ng ch·ªù?" },
    { eng: "He didn't see the memo", viet: "Anh ·∫•y kh√¥ng th·∫•y b·∫£n ghi nh·ªõ" },
    { eng: "A shade of pale green", viet: "M·ªôt s·∫Øc th√°i xanh nh·∫°t" },
    { eng: "I don't mind waiting", viet: "T√¥i kh√¥ng phi·ªÅn ch·ªù ƒë·ª£i" },
    { eng: "What was the article about?", viet: "B√†i b√°o n√≥i v·ªÅ g√¨?" },
    { eng: "I didn't read it", viet: "T√¥i kh√¥ng ƒë·ªçc n√≥" },
    { eng: "No, not recently", viet: "Kh√¥ng, kh√¥ng g·∫ßn ƒë√¢y" },
    { eng: "That's about it", viet: "ƒê·∫°i kh√°i l√† v·∫≠y" },
    { eng: "Who was in your office this morning?", viet: "Ai ƒë√£ ·ªü trong vƒÉn ph√≤ng c·ªßa b·∫°n s√°ng nay?" },
    { eng: "In the other building", viet: "Trong t√≤a nh√† kh√°c" },
    { eng: "I'll meet him tomorrow", viet: "T√¥i s·∫Ω g·∫∑p anh ·∫•y v√†o ng√†y mai" },
    { eng: "My manager Mr. Lao", viet: "Qu·∫£n l√Ω c·ªßa t√¥i, √¥ng Lao" },
    { eng: "Who's leading the orientation?", viet: "Ai ƒëang d·∫´n d·∫Øt bu·ªïi ƒë·ªãnh h∆∞·ªõng?" },
    { eng: "He read it recently", viet: "Anh ·∫•y ƒë√£ ƒë·ªçc n√≥ g·∫ßn ƒë√¢y" },
    { eng: "The human resource team", viet: "ƒê·ªôi nh√¢n s·ª±" },
    { eng: "Some training manuals", viet: "M·ªôt s·ªë t√†i li·ªáu ƒë√†o t·∫°o" },
    { eng: "What should I bring to the trade show?", viet: "T√¥i n√™n mang g√¨ ƒë·∫øn h·ªôi ch·ª£ th∆∞∆°ng m·∫°i?" },
    { eng: "Your business cards", viet: "Th·∫ª kinh doanh c·ªßa b·∫°n" },
    { eng: "At the conference center", viet: "T·∫°i trung t√¢m h·ªôi ngh·ªã" },
    { eng: "Sorry, I have it", viet: "Xin l·ªói, t√¥i c√≥ r·ªìi" },
    { eng: "What kind of company does Mr. Perez manage?", viet: "√îng Perez qu·∫£n l√Ω lo·∫°i c√¥ng ty n√†o?" },
    { eng: "For twenty years", viet: "Trong hai m∆∞∆°i nƒÉm" },
    { eng: "I can manage that", viet: "T√¥i c√≥ th·ªÉ qu·∫£n l√Ω ƒë∆∞·ª£c vi·ªác ƒë√≥" },
    { eng: "An advertising agency", viet: "M·ªôt c√¥ng ty qu·∫£ng c√°o" }
];

let currentQuestion = {};
let currentMode = '';
let score = 0;
let selectedAnswer = null;
let usedQuestions = [];
let questionCount = 0;
const MAX_QUESTIONS = 10;

function startGame(mode) {
    currentMode = mode;
    score = 0;
    questionCount = 0;
    usedQuestions = [];
    document.getElementById('score').textContent = score;
    document.getElementById('game-area').style.display = 'block';
    document.getElementById('fill-input').style.display = mode === 'fillBlank' ? 'block' : 'none';
    document.getElementById('options').style.display = mode === 'fillBlank' ? 'none' : 'block';
    document.getElementById('result').textContent = '';
    document.getElementById('result').className = '';
    document.getElementById('restart-button').style.display = 'none';
    generateQuestion();
}

function generateQuestion() {
    // N·∫øu ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√¢u h·ªèi
    if (questionCount >= MAX_QUESTIONS) {
        gameOver();
        return;
    }
    
    // T·∫°o m·∫£ng c√°c c√¢u h·ªèi ch∆∞a s·ª≠ d·ª•ng
    const availableQuestions = vocabulary.filter(q => !usedQuestions.includes(q));
    
    // N·∫øu ƒë√£ h·∫øt c√¢u h·ªèi, reset l·∫°i m·∫£ng c√¢u h·ªèi ƒë√£ d√πng
    if (availableQuestions.length === 0) {
        usedQuestions = [];
        generateQuestion();
        return;
    }
    
    const randomIndex = Math.floor(Math.random() * availableQuestions.length);
    currentQuestion = availableQuestions[randomIndex];
    usedQuestions.push(currentQuestion);
    questionCount++;

    document.getElementById('fill-input').value = ''; // Reset input field

    if (currentMode === 'engToViet') {
        document.getElementById('question').textContent = currentQuestion.eng;
        generateOptions('viet');
    } else if (currentMode === 'vietToEng') {
        document.getElementById('question').textContent = currentQuestion.viet;
        generateOptions('eng');
    } else if (currentMode === 'fillBlank') {
        const words = currentQuestion.eng.split(' ');
        // Ch·ªçn m·ªôt t·ª´ ng·∫´u nhi√™n ƒë·ªÉ ·∫©n (kh√¥ng ph·∫£i t·ª´ ƒë·∫ßu ho·∫∑c cu·ªëi)
        const randomWordIndex = Math.floor(Math.random() * (words.length - 2)) + 1;
        const hiddenWord = words[randomWordIndex];
        words[randomWordIndex] = '_____';
        document.getElementById('question').textContent = words.join(' ');
        // L∆∞u t·ª´ b·ªã ·∫©n ƒë·ªÉ ki·ªÉm tra sau n√†y
        currentQuestion.hiddenWord = hiddenWord;
    }
}

function generateOptions(key) {
    const optionsDiv = document.getElementById('options');
    optionsDiv.innerHTML = '';
    selectedAnswer = null;

    const correctAnswer = currentQuestion[key];
    
    // L·∫•y c√°c ƒë√°p √°n sai t·ª´ t·ª´ v·ª±ng, lo·∫°i b·ªè ƒë√°p √°n ƒë√∫ng
    const allAnswers = vocabulary.map(item => item[key]).filter(answer => answer !== correctAnswer);
    const shuffledAnswers = [correctAnswer];

    // Ch·ªçn 3 ƒë√°p √°n sai ng·∫´u nhi√™n, ƒë·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p
    while (shuffledAnswers.length < 4) {
        const randomIndex = Math.floor(Math.random() * allAnswers.length);
        const randomAnswer = allAnswers[randomIndex];
        if (!shuffledAnswers.includes(randomAnswer)) {
            shuffledAnswers.push(randomAnswer);
        }
    }

    // X√°o tr·ªôn c√°c ƒë√°p √°n
    shuffledAnswers.sort(() => Math.random() - 0.5);

    shuffledAnswers.forEach(answer => {
        const button = document.createElement('button');
        button.textContent = answer;
        button.onclick = () => selectAnswer(button, answer);
        optionsDiv.appendChild(button);
    });
}

function selectAnswer(button, answer) {
    // B·ªè ch·ªçn ƒë√°p √°n tr∆∞·ªõc ƒë√≥
    const allButtons = document.querySelectorAll('#options button');
    allButtons.forEach(btn => btn.classList.remove('selected'));

    // ƒê√°nh d·∫•u ƒë√°p √°n ƒë∆∞·ª£c ch·ªçn
    button.classList.add('selected');
    selectedAnswer = answer;
}

function checkAnswer() {
    const result = document.getElementById('result');
    let correctAnswer, userAnswer;

    if (currentMode === 'engToViet') {
        correctAnswer = currentQuestion.viet;
        userAnswer = selectedAnswer;
    } else if (currentMode === 'vietToEng') {
        correctAnswer = currentQuestion.eng;
        userAnswer = selectedAnswer;
    } else if (currentMode === 'fillBlank') {
        correctAnswer = currentQuestion.hiddenWord;
        userAnswer = document.getElementById('fill-input').value.trim();
    }

    if (!userAnswer) {
        result.textContent = 'Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p ƒë√°p √°n!';
        result.className = 'wrong';
        return;
    }

    // Ki·ªÉm tra ƒë√°p √°n (tr∆∞·ªùng h·ª£p fill blank kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    const isCorrect = currentMode === 'fillBlank' 
        ? userAnswer.toLowerCase() === correctAnswer.toLowerCase()
        : userAnswer === correctAnswer;

    if (isCorrect) {
        result.textContent = 'Ch√≠nh x√°c! üéâ';
        result.className = 'correct';
        score += 10;
        document.getElementById('score').textContent = score;
    } else {
        result.textContent = `Sai r·ªìi! ƒê√°p √°n ƒë√∫ng l√†: ${correctAnswer}`;
        result.className = 'wrong';
    }

    // T·ª± ƒë·ªông chuy·ªÉn c√¢u h·ªèi sau 2.5 gi√¢y
    setTimeout(() => {
        result.textContent = '';
        result.className = '';
        generateQuestion();
    }, 2500);
}

function gameOver() {
    document.getElementById('question').textContent = `K·∫øt th√∫c! ƒêi·ªÉm c·ªßa b·∫°n: ${score}/${MAX_QUESTIONS * 10}`;
    document.getElementById('options').style.display = 'none';
    document.getElementById('fill-input').style.display = 'none';
    document.getElementById('check-button').style.display = 'none';
    document.getElementById('restart-button').style.display = 'block';
}

function resetGame() {
    document.getElementById('check-button').style.display = 'block';
    document.getElementById('restart-button').style.display = 'none';
    startGame(currentMode);
}